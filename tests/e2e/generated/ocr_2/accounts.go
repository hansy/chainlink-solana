// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package ocr_2

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type State struct {
	Nonce               uint8
	Config              Config
	Oracles             Oracles
	LeftoverPayments    [19]LeftoverPayment
	LeftoverPaymentsLen uint8
	Transmissions       ag_solanago.PublicKey
}

var StateDiscriminator = [8]byte{216, 146, 107, 94, 104, 75, 182, 177}

func (obj State) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(StateDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	// Serialize `Config` param:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return err
	}
	// Serialize `Oracles` param:
	err = encoder.Encode(obj.Oracles)
	if err != nil {
		return err
	}
	// Serialize `LeftoverPayments` param:
	err = encoder.Encode(obj.LeftoverPayments)
	if err != nil {
		return err
	}
	// Serialize `LeftoverPaymentsLen` param:
	err = encoder.Encode(obj.LeftoverPaymentsLen)
	if err != nil {
		return err
	}
	// Serialize `Transmissions` param:
	err = encoder.Encode(obj.Transmissions)
	if err != nil {
		return err
	}
	return nil
}

func (obj *State) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(StateDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[216 146 107 94 104 75 182 177]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return err
	}
	// Deserialize `Oracles`:
	err = decoder.Decode(&obj.Oracles)
	if err != nil {
		return err
	}
	// Deserialize `LeftoverPayments`:
	err = decoder.Decode(&obj.LeftoverPayments)
	if err != nil {
		return err
	}
	// Deserialize `LeftoverPaymentsLen`:
	err = decoder.Decode(&obj.LeftoverPaymentsLen)
	if err != nil {
		return err
	}
	// Deserialize `Transmissions`:
	err = decoder.Decode(&obj.Transmissions)
	if err != nil {
		return err
	}
	return nil
}

type Transmissions struct {
	LatestRoundId uint32
	Cursor        uint32
	Transmissions [8192]Transmission
}

var TransmissionsDiscriminator = [8]byte{96, 179, 69, 66, 128, 129, 73, 117}

func (obj Transmissions) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(TransmissionsDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `LatestRoundId` param:
	err = encoder.Encode(obj.LatestRoundId)
	if err != nil {
		return err
	}
	// Serialize `Cursor` param:
	err = encoder.Encode(obj.Cursor)
	if err != nil {
		return err
	}
	// Serialize `Transmissions` param:
	err = encoder.Encode(obj.Transmissions)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Transmissions) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(TransmissionsDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[96 179 69 66 128 129 73 117]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `LatestRoundId`:
	err = decoder.Decode(&obj.LatestRoundId)
	if err != nil {
		return err
	}
	// Deserialize `Cursor`:
	err = decoder.Decode(&obj.Cursor)
	if err != nil {
		return err
	}
	// Deserialize `Transmissions`:
	err = decoder.Decode(&obj.Transmissions)
	if err != nil {
		return err
	}
	return nil
}
